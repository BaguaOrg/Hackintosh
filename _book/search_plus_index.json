{"./":{"url":"./","title":"一、前言介绍","keywords":"","body":"国光的黑苹果安装教程：手把手教你配置 OpenCore Hackintosh 且行且珍惜 写这篇文章的时间是 2021 年 09 月 15 日，今天的苹果发布会暂时还没有下一代 Mac 的消息，如果下一代 Mac 不配备 intel CPU 的话，那么黑苹果这个技术会随着时间的流逝逐渐成功历史，为了证明自己来过，所以写了这个系列的黑苹果从 0 开始的教程。 实际上 OpenCore 官方文档写的已经很不错了，本教程的大部分内容也会搬运自 OpenCore 官方文档。 本 Gitbook 系列的原版文件开源项目地址为：https://github.com/sqlsec/Hackintosh Why Reinventing 轮子? 为什么要重复造轮子呢？国光我不是一个喜欢重复造轮子的人，而且这个工作量本身也很大，平时的工作任务本身就很有挑战性了，还得抽出时间写这个系列，这不是自讨苦吃吗。所以我想分享一下，写这个系列的 Gitbook 的几个原因： OpenCore 官方文档对小白不是很友好，也不符合国内的阅读习惯，阅读需要一定的门槛 OpenCore 黑苹果这块一直没有一个系统的教程，写这个系列日后还可以配合视频讲解在 B 站出一个教程系列 授人以鱼不如授人以渔，与其等待大佬们的 EFI，不如自己动手自己配置一个自己的 EFI 关于 Hackintosh 凡是存在即合理，黑苹果的英文 Hackintosh，里面出现了 Hack，说到 Hack 就不得不提 Hacker 的几个基本的精神：热爱、叛逆、共享、开源、免费...... 所以黑苹果本身也继承了这些特点，试想一下，如果著名的黑苹果 kexts 驱动：Liu、WhateverGreen、AppleALC 不开源的话，黑苹果技术还会和我们有关系吗？我们本质上就是一些 kexts 的搬运工，本身并没有创造什么，只是一些基本的排列组合。这也是国光我也坚持开源 EFI 的原因，毕竟喝水不忘挖井人。 好了，说了一堆乱七八糟的了，下面黑苹果教程正式开始。 一起完善 together 当然一个人的精力是有限的，疏漏难以避免，如果你发现错误或者遗留的话可以直接发我邮箱即可 admin@sqlsec.com 或者直接通过 Github 提交 PR 也是很欢迎的。 参考资料 Reference Dortania's OpenCore Install Guide [指南] hackintosh之SSDT/DSDT · Mac OS之程序员 · 看云 DSDT - ArchWiki 黑果小兵的部落阁 黑苹果星球-分享Mac的精彩世界 powered by Gitbook该文章最后修改时间： 2021-09-18 10:09:08 "},"1-基础知识/":{"url":"1-基础知识/","title":"二、基础知识","keywords":"","body":"二、基础知识 黑苹果安装的一些基础知识点，主要包括如下内容： 1. 基操勿六 2. 硬件限制 3. 寻找硬件 4. 专业术语 powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"1-基础知识/1-1.html":{"url":"1-基础知识/1-1.html","title":"1. 基操勿六","keywords":"","body":"1. 基操勿六 基础知识就是默认大家都懂的，如果不懂得话建议补一下基础再看此教程。 时间、稳定、版权 如果有项目要截止的话，请不要开始看这篇教程，因为刚开始黑苹果的过程基本上不会一帆风顺的，随便走一点弯路都是极其耗费时间的事情，另外注意休息，黑苹果的过程不差你熬夜的那几个小时。 如果你对系统要求追求稳定的话，也尽量不要使用黑苹果，虽然黑苹果完美度已经无限接近白苹果了，但是毕竟还是有个“黑”字，安装的时候要注意重要资料备份。 如果你的公司是正版化普及的公司（一般是 BAT 等大型公司），也不要使用黑苹果接入公司的网络，这样可能会收到苹果的律师函（树大招风），严格来说黑苹果属于 Hack 行为，侵犯了苹果公司的版权。 准备工作 一个满足黑苹果硬件限制的电脑和一个至少 16GB 的 U 盘，虽然目前来看 16GB 完全足够了，但是这几年苹果的镜像体积越拉越大，国光曾经在刻录一个 3 分区的镜像的时候，居然提示了 U 盘空间不足的情况。 另外，U 盘速度越快越好，可以极大的缩短黑苹果安装 U 盘的制作和系统安装的时间。 基本操作 首先安装黑苹果前得保证自己可以熟练安装 Windows 或者 Linux 系统（加分项），因为黑苹果安装需要磁盘满足一定要求，所以重新删除分区安装系统是常有的事情，如果你不会安装 Windows 不会熟练使用 PE 系统的话，建议去学习这些基本技能后再来学习黑苹果安装。 powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"1-基础知识/1-2.html":{"url":"1-基础知识/1-2.html","title":"2. 硬件限制","keywords":"","body":"2. 硬件限制 黑苹果的硬件和白苹果越接近约好，这样黑起来才比较顺利，最后的完成度也比较高。 CPU 支持 桌面 CPU 以你的 CPU 代号架构为准，后面的例子仅供参考，CPU 型号混乱，所以并不完整。 CPU 代号 中文名 for example Penryn ？？？ 太老了 我也太懒了 不写了 Yonah 尤娜？ 太老了 我也太懒了 不写了 Conroe ？？？ 太老了 我也太懒了 不写了 Merom ？？？ 太老了 我也太懒了 不写了 Penryn ？？？ 太老了 我也太懒了 不写了 Lynnfield ？？？ 太老了 我也太懒了 不写了 Clarkdale ？？？ 太老了 我也太懒了 不写了 Sandy Bridge 桑迪桥 2 代酷睿 Ivy Bridge ？？？ 3 代酷睿 Haswell 哈斯威尔 4 代酷睿 Broadwell 布罗德韦尔 5 代酷睿 SkyLake 天空湖 6 代酷睿 Kaby Lake 卡比湖 7 代酷睿 Coffee Lake 咖啡湖 8、9 代酷睿 Comet Lake 彗星湖 10 代酷睿 笔记本 CPU 以你的 CPU 代号架构为准，后面的例子仅供参考，CPU 型号混乱，所以并不完整。 CPU 代号 中文名 for example Clarksfield ？？？ 太老了 我也太懒了 不写了 Arrandale ？？？ 太老了 我也太懒了 不写了 Sandy Bridge 桑迪桥 2 代酷睿 Ivy Bridge ？？？ 3 代酷睿 Haswell 哈斯威尔 4 代酷睿 Broadwell 布罗德韦尔 5 代酷睿 SkyLake 天空湖 6 代酷睿 Kaby Lake 卡比湖 7 代酷睿 Whiskey Lake 威士忌湖 8 代酷睿 Coffee Lake 咖啡湖 8、9 代酷睿 Comet Lake 彗星湖 10 代酷睿 Ice Lake 冰湖 10 代酷睿 i5-1035G4、i7-1065G7... 高端桌面 CPU 以你的 CPU 代号架构为准，后面的例子仅供参考，CPU 型号混乱，所以并不完整。 CPU 代号 中文名 for example Nehalem ？？？ 太老了 我也太懒了 不写了 Westmere ？？？ 太老了 我也太懒了 不写了 Sandy Bridge-E 桑迪桥 i7-3960X、i7-3960K、i7-3820K Ivy Bridge-E ？？？ i7-4960X、i7-4960K、i7-4820K Haswell-E 哈斯威尔 i7 5960X、i7 5820K、i7 5930K Broadwell-E 布罗德韦尔 i7-6950X、i7-6900K、i7-6850K、i7-6800K Skylake-X/W 天空湖 i7-7800X、i7-9800X、Xeon W-2104 Cascade Lake-X/W 级联湖 Xeon Gold 6142M AMD CPU 以你的 CPU 代号架构为准，后面的例子仅供参考，CPU 型号混乱，所以并不完整。 CPU 代号 中文名 for example Bulldozer(15h) 推土机 FX-41X0、FX-6XX0、FX-81X0 Jaguar(16h) 美洲豹 太老了 我也太懒了 不写了 Ryzen 锐龙 比较著名的架构 Threadripper(17h and 19h) 线程撕裂者 1950X、2990WX、3990X、3995WX GPU 支持 显卡这块也比较杂，难以列的很全，建议买之前先确定你的型号显卡有成功的案例再进行购买。显卡驱动情况大体上可以参考如下： AMD 的 GPU 支持情况： AMD 的 APU 系列目前无法驱动 AMD 的独显从 GCN 架构开始后面驱动情况都还不错 Intel 的 GPU 支持情况： macOS 不支持 Pentium、Celeron 和 Atom 上的低端 GT1 iGPU 绝大多数的 intel 核显都可以很好的驱动 理论上最强的核显是 i7-1065G7、其次是 lris 锐矩系列、接着是 UHD、HD 系列 NVIDIA 的 GPU 支持情况： Maxwell 麦克斯韦（9XX）和 Pascal 帕斯卡（10XX）系列最高只能安装到 macOS 10.13 High Sierra Turing 图灵（20XX, 16XX）目前无解 Ampere 安培 （30XX）目前无解 Keler （6XX，7XX）目前支持最新版本的 macOS，这是因为 MBP 历史上配备过这个显卡 GPU 型号也太杂了，这些也不在本教程范围类，OpenCore 官方总结的已经很详细了，大家可以参考： GPU Buyers Guide- 显卡购买指南 主板支持 绝大多数的主板都可以驱动 硬盘支持 在大多数情况下，支持所有基于 SATA 的硬盘以及大多数 NVMe 硬盘，但是也有少数比较坑的型号： 三星 PM981、PM991 和美光 2200S NVMe SSD 英特尔 600p 这些型号尽管后面使用 NVMeFix.kext 可以修复内核恐慌，但是依然可能会有一些小毛病，新手的话还是建议换硬盘，不建议碰这些型号。 有线网卡 几乎所有有线网络适配器在 macOS 中都有某种形式的支持，通过内置驱动程序或社区制作的 kexts。主但是也有一些棘手的型号： 英特尔 I225 2.5Gb 网卡 高端桌面 Comet Lake 主板可能配备 可能的解决方法：来源和例子 Intel I350 1Gb 服务器网卡 在各代 Intel 和 Supermicro 服务器主板上可能配备 解决方法 Intel 10Gb 服务器网卡 X520 和 X540 芯片组可能的变通方法 Mellanox 和 Qlogic 服务器网卡 无线网卡 大多数笔记本电脑附带的无线网卡不受支持，因为它们通常是 Intel/Qualcomm。如果幸运的话，您可能有一张受支持的 Atheros 卡，但支持最多只能达到 High Sierra。 最好的选择是获得受支持的 Broadcom 博通卡；可以参考 WiFi 购买者指南 后续国内的大佬 zxystd 移植开源了 intel 的网卡驱动也可以解决大多数 intel 网卡的驱动问题，虽然目前暂时无法使用隔空投送 AirDrop 但是已经进步很大了： intel 网卡可驱动的型号列表 声卡支持 声卡主要依赖 AppleALC 开源 kexts 来驱动，可以启用原生的 macOS 高清音频。 黑苹果声卡的驱动情况表以及 layouts id 情况 其他硬件 指纹传感器 目前无法模拟 Touch ID 传感器，因此指纹传感器基本上无解 Windows Hello 人脸识别 某些笔记本电脑带有 I2C 连接的 WHFR（并通过您的 iGPU 使用），这些将无法正常工作。 一些笔记本电脑带有 USB 连接的 WHFR，如果幸运的话，您可能会获得相机功能，但没有其他功能。 英特尔智能声音技术 配备英特尔 SST 的笔记本电脑不会通过它们（通常是内部麦克风）工作连接任何东西，因为它不受支持。您可以使用 Windows 上的设备管理器进行检查。 耳机麦克风一体接口组合 某些带有组合耳机麦克风接口的笔记本电脑可能无法通过它们获得音频输入，而必须使用内置麦克风或通过 USB 的外部音频输入设备。 雷电接口 雷电接口比较难搞和玄学，OC 官方建议主板禁用掉雷电口，但是不代表无解只是难搞 powered by Gitbook该文章最后修改时间： 2021-09-17 15:45:42 "},"1-基础知识/1-3.html":{"url":"1-基础知识/1-3.html","title":"3. 寻找硬件","keywords":"","body":"3. 寻找硬件 上文中大家差不多清楚了硬件的驱动情况，本篇中就分享一下如果判断确定自己的硬件型号的方法和技巧。 使用 Windows 查看硬件 CPU 型号 可以使用 Windows 自带的设备管理器或者自带的任务管理等，或者使用第三方的软件：CPU-Z、AIDA64、鲁大师等 GPU 型号 可以使用 Windows 自带的设备管理器或者自带的任务管理等，或者使用第三方的软件：GPU-Z、AIDA64、鲁大师等 芯片组型号 设备管理器： 或者使用 AIDA64 这类第三方软件： 声卡型号 建议使用 AIDA64、鲁大师等第三方软件： 网卡型号 设备管理器或者 AIDA64，还是建议使用第三方的软件查看： 硬盘型号 硬盘的话通过软件一般看不到详细的信息，只能自己配合谷歌去确认 一下： 键盘、触控板、触控屏连接类型 遗憾的是，AIDA64 没有提供有这类设备的任何有用信息，因此我们建议为此使用设备管理器。 您可以在以下位置找到这些设备： Human Interface Devices 人体学接口设备(HID) Keyboards 键盘 Mice and other Pointer Devices 鼠标和其他指针设备 要查看设备的确切连接类型，请选择指针设备，然后输入View -> Device by Connection。这样比较直观地展示它是否通过 PS2、I2C、SMBus、USB 等连接情况 根据设备的不同，它可能会显示在多个名称和连接下。主要关注以下几点： SMBus 一般这种触控板的驱动支持比较友好，手势也很完美，在设备管理器中将显示为一条直线PCI设备，如Synaptics SMBus Driver或ELAN SMBus Driver USB 这些将显示为一个PS2 Compliant Trackpad，以及在USB当我们切换我们的连接视图Device by Connection I2C 这些几乎总是显示为 Microsoft HID 设备，但也可以显示为其他触控板。不过，它们将始终显示在 I2C 下。 使用 Linux 查看硬件 为了使用 Linux 查找硬件，我们将使用如下命令： pciutils dmidecode 大多数 Linux 发行版都已经安装了这些工具。如果没有，您可能会在发行版的包管理器中找到它们。 # CPU型号 grep -i \"model name\" /proc/cpuinfo # 显卡型号 lspci | grep -i --color \"vga\\|3d\\|2d\" # 芯片组型号 dmidecode -t baseboard # 声卡型号 aplay -l # 网卡型号 lspci | grep -i network lshw -class networ # 硬盘型号 lshw -class disk -class storage # 键盘、触控板、触控屏连接类型 dmesg | grep -i input powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"1-基础知识/1-4.html":{"url":"1-基础知识/1-4.html","title":"4. 专业术语","keywords":"","body":"4. 专业术语 基础名词 名词 描述 Hackintosh 将 macOS 安装到非苹果官方 PC 的过程，请注意Hackintosh 不是操作系统 Bootloader 加载操作系统的软件，通常由操作系统创建者制作 Boot Manager 管理引导加载程序的软件比如：Clover、OpenCore 等 Clover 被 OpenCore 逐步替代的一个引导方式 OpenCore 由Acidanthera 团队在打造的 Hackintosh 新的更完美的引导方式 ACPI 高级配置和电源接口 ，可以让系统更好的识别硬件信息 DSDT/SSDT ACPI 中的表格，描述设备以及操作系统应如何与它们交互 .AML ACPI 的编译文件格式 .DSL ACPI 的源代码文件 Kexts 全程叫 Kernel Extensions 内核扩展，我们国内可以通俗的翻译为驱动 BIOS 基本输出输入系统，可以通俗的理解为主板的操作系统 UEFI 统一可扩展固件接口，可以让 PC 从预启动的操作环境，加载到操作系统上 UEFI 驱动 与任何其他操作系统一样，UEFI 具有驱动程序，它们由 Clover 或 OpenCore 加载 NVRAM 非易失性随机访问存储器，主板自带的，UEFI 启动的时候会先加载 NVRM ACPI 相关 名词 描述 EC 嵌入式控制器。在主板和嵌入式外围设备（如热键、端口或电池）之间进行通信 PLUG 允许连接 XCPM、Apple XNU 电源管理，以实现更好的整体 CPU 控制 AWAC ACPI Wake Alarm Counter Clock，板的内部时钟，Hackintosh 必须对其进行修补 PMC 电源管理控制器，部分主板需要 SSDT-PMC 来进行修补 PNLF 内部背光显示，macOS 使用此 PNLF 设备发送和接收信息以进行亮度控制 XOSI/_OSI _OSI 用于确定正在启动的操作系统，重命名为 XOSI 允许我们欺骗硬件 HPET 高精度事件定时器，macOS 对设备的设置方式非常挑剔，因此我们有时需要修补 HPET RHUB 根 USB 集线器，其中定义了 USB 端口。 IMEI 英特尔管理引擎接口，处理杂项任务。macOS 依靠 IMEI 来实现 Intel GPU 加速 UNC Uncore Bridge，类似于北桥，它处理许多与缓存相关的功能 SMBS 系统管理总线，用于允许设备之间轻松通信。 UEFI 引导磁盘结构划分 UEFI 相关的概念 UEFI 是 Unified Extensible Firmware Interface（统一可扩展固件接口），可以让 PC 从预启动的操作环境，加载到操作系统上。大家可以理解为 UEFI 是一种系统引导方式，基本上 2010 年后的电脑都是支持 UEFI 引导方式的。 UEFI 引导常配合 GPT 分区表来使用，在 DiskGenius 中，选中磁盘，右键选【转换分区表类型为 GUID 格式】即可将磁盘转换为 GPT 分区表。 EFI 分区是 UEFI 引导必备的一个分区，在磁盘当中的名称一般叫做 ESP 分区，它大多位于磁盘的第 1 个分区，格式可以是 FAT16 也可以是 FAT32 格式，主要用来保存引导文件。安装黑苹果的话，要注意 ESP 的分区得大于 200MB，国光我建议设置为 300MB 基本上足够使用了。 单个硬盘安装单独的 macOS 值得一说的是，这种情况压根不需要我们手动创建 EFI 分区，直接安装的时候选择整个想要安装的磁盘即可，macOS 会自动创建磁盘分区的： 单个硬盘安装 Windows 和 macOS powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"2-启动盘制作/":{"url":"2-启动盘制作/","title":"三、U盘制作","keywords":"","body":"三、启动盘制作 黑苹果安装 U 盘制作的一些知识点，主要包括如下内容： 1. 下载镜像 2. 写入镜像 3. 结构讲解 powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"2-启动盘制作/2-1.html":{"url":"2-启动盘制作/2-1.html","title":"1. 下载镜像","keywords":"","body":"1. 下载镜像 我们国内黑苹果小兵前辈会经常更新一些懒人镜像，这些镜像很适合小白使用。 大家可以去前辈的博客去下载就行了，双分区、三分区的都是可以的。 如果大家想下载苹果官方的镜像，自己制作的话（不适合小白）可以直接参考 OC 官方文档，国光我就不搬运了，直接贴了地址： Creating the USB | OpenCore Install Guide powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"2-启动盘制作/2-2.html":{"url":"2-启动盘制作/2-2.html","title":"2. 写入镜像","keywords":"","body":"2. 写入镜像 写入镜像实际上也有很多工具，国光这里推荐一个后来居上的工具 balenaEthcher 官方支持 Windows、macOS、Linux 的版本，下载即可使用。下面简单说下安装制作镜像的方法： 这个软件使用也比较简单，就是上图标记的三步，是不是很简单呢？ 由于国光我手上的这个 U 盘是固态改的，所以几分钟时间就写入完成了，写入成功后的提示信息如下： powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"2-启动盘制作/2-3.html":{"url":"2-启动盘制作/2-3.html","title":"3. 结构讲解","keywords":"","body":"3. 结构讲解 黑苹果 U 盘制作完成了，下面来大概讲解一下目前 U 盘的结构划分情况，以及作用是啥，话不多说直接看图： macOS 下使用 Hackintool 可以直观的看到磁盘的结构信息： 如果是 Windows 的话，使用经典的磁盘工具 DiskGenius 也是可以看到的。下面来给大家一一展示下这 3 个分区里面放着哪些内容。 挂载 EFI 绝大多数的情况下 EFI 分区默认是隐藏的，我们在 Hackintool 工具下「右键」选择「装载」输入密码后即可挂载 EFI 分区： 挂载 EFI 分区后，桌面上的三个分区就全部显示出来了： EFI 默认 EFI 分区下的文件内容如下： 小兵前辈还放了 2 个 app，我们可以选择性保留。 默认的 EFI 文件夹是 Clover 配套的，所以后续我们需要删掉整个 EFI 文件夹，然后讲 OC 的 EFI 拷贝进来。 WEPE 默认 WEPE 分区下的文件内容如下： 这个分区我们一般不用管，虽然这里也有 EFI 文件夹，但是这个是引导 Windows PE 使用的，了解一下就行。 Install macOS Big Sur Install macOS Big Sur 分区下面就躺着苹果官方的系统安装包了，这个实际上是 .app 结尾的格式，苹果的应用基本上都是这个格式，实际上我们后续安装黑苹果成功之后，也可以去 AppStore 里面手动下载这个镜像： 至此，启动盘初步就制作好了，接下来就是我们配置好一个适合我们机型的 EFI 驱动配置文件的事情了，配置好 EFI 直接放入到 U 盘 EFI 分区下即可。 powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"3-准备工作/":{"url":"3-准备工作/","title":" 四、准备工作","keywords":"","body":"四、准备工作 powered by Gitbook该文章最后修改时间： 2021-09-17 11:44:26 "},"3-准备工作/3-1.html":{"url":"3-准备工作/3-1.html","title":"1. BIOS设置","keywords":"","body":"1. BIOS设置 以下 BIOS 设置尽量参考一下，因为主板型号凌乱的原因，找不全也是很正常的，尽量靠齐这些设置就行。 Intel 主板 BIOS 设置 关闭 - Disable Fast Boot 快速启动 Secure Boot 安全启动 Serial/COM Port 串行通讯端口 Parallel Port 并行端口 VT-d Intel® Virtualization Technology for Directed I/O (VT-d) 的缩写，I/O 的虚拟化技术 如果找不到的话，配置里面设置 DisableIoMapper 选项为 YES 也是 OK 的 CSM 容性支持模块 Thunderbolt 雷电，安装的时候雷电口没有关容易引发一些玄学问题，建议关掉省事儿 Intel SGX 也叫做 Software Guard Extensions，是Intel 推出的一种基于 CPU 硬件的安全保障机制 Intel Platform Trust 英特尔平台可信技术，主要用于密钥管理（密钥的加密及存储）和安全认证服务 CFG Lock MSR 0xE2 写保护 必须关闭，如果找不到的话，配置里面设置 AppleXcpmCfgLock 选项为 YES 也是 OK 的 开启 - Enable VT-x intel 运用 Virtualization 虚拟化技术中的一个指令集，是CPU的硬件虚拟化技术 Above 4G decoding 4G 以上解码 Hyper-Threading 超线程技术 Execute Disable Bit Intel 新一代处理器的功能，主要做病毒防护使用 DVMT Pre-Allocated: 64MB 分配给DVMT所需要内存大小 EHCI/XHCI Hand-off EHCI/XHCI 切换 OS type: Windows 8.1/10 UEFI Mode 操作系统类型 SATA Mode: AHCI SATA 磁盘启动模式 AMD 主板 BIOS 设置 关闭 - Disable Fast Boot 快速启动 Secure Boot 安全启动 Serial/COM Port 串行通讯端口 Parallel Port 并行端口 Compatibility Support Module (CSM) 容性支持模块，必须关闭 开启 - Enable Above 4G decoding 4G 以上解码 必须打开，如果主板找不到的话，就在 boot-args 启动参数添加 npci=0x2000 也是 OK 的 EHCI/XHCI Hand-off EHCI/XHCI 切换 OS type: Windows 8.1/10 UEFI Mode 操作系统类型 SATA Mode: AHCI SATA 磁盘启动模式 部分成品主板的参考案例 华擎 AsRock Z490 Steel Legend 钢铁传奇 「高级」-「CPU 配置」-「Intel Hyper Threading Technology」-「开启」 「高级」-「CPU 配置」-「CFG Lock」-「关闭」 「高级」-「CPU 配置」-「Software Guard Extensions（SGX）」-「关闭」 「高级」-「芯片组配置」-「Above 4G Decoding」-「启用」 「高级」-「芯片组配置」-「VT-d」-「禁用」 「高级」-「芯片组配置」-「共享内存」-「64MB」 「高级」-「芯片组配置」-「IGPUA 多监视器」-「启用」 「高级」-「芯片组配置」-「深度睡眠」-「在 S4-S5 中启用」 「高级」-「存储 配置」-「SATA 模式选择」-「AHCI」 「高级」-「Intel(R) Thunderbolt」-「Discrete Thunderbolt(TM) Support」-「关闭」 「高级」-「ACPI 配置」-「挂起到内存」-「自动」 「高级」-「ACPI 配置」-「USB 键盘/远程开机」-「Disabled」 「高级」-「ACPI 配置」-「USB 鼠标开机」-「Disabled」 「高级」-「USB 配置」-「XHCI Hand-off」-「Enabled」 「安全」-「Secure Boot」-「安全引导」-「关闭」 「安全」-「Intel(R) Platform Trust Technology」-「禁用」 「引导」-「闪速启动」-「关闭」 「引导」-「CSM」-「关闭」 驰为 CoreBook X 14 「Advanced」-「Software Guard Extensions（SGX）」-「Disabled」 「Advanced」-「Hyper-Threading」-「Enabled」 「Advanced」-「ACPI Settings」-「Enable Hibernation」-「Enabled」 「Advanced」-「USB Configuration」-「Legacy USB Support」-「Enabled」 「Advanced」-「XHCI Hand-off」-「Enabled」 「Advanced」-「CSM Configuration」-「CSM Support」-「Disabled」 「Chipset」-「Type C Support」-「Platform-POR」 「Chipset」-「System Agent (SA) Configuration」-「VT-d」-「Disabled」 「Chipset」-「Above 4GB MMID BIOS assignment」-「Enabled」 「Chipset」-「Graphics Configuration」-「DVMT Pre-Allocated」-「64MB」 「Chipset」-「PCH-IO Configuration」-「SATA Mode Selection」-「AHCI」 「Security」-「Security Boot」-「Security Boot」-「Disabled」 「Boot」-「Quiet Boot」-「Enabled」 「Boot」-「Fast Boot」-「Disabled」 powered by Gitbook该文章最后修改时间： 2021-09-18 16:07:52 "},"3-准备工作/3-2.html":{"url":"3-准备工作/3-2.html","title":"2. OC 文件结构","keywords":"","body":"2. OC 文件结构 原始文件结构 OpenCore 引导的官方项目地址为：https://github.com/acidanthera/OpenCorePkg 查看最新版本的下载地址为：https://github.com/acidanthera/OpenCorePkg/releases 截止写文章的时间 2021 年 09 月 17 日，最新的 OC 引导为 0.7.3 的版本，所以我们下载 OpenCore-0.7.3-RELEASE.zip 并解压，这样就得到 OC 的最原始的文件了。 下面分别大概说明一下这些目录的作用： Docs：存放 OC 最新的配置文档、版本更新变化、ACPI 示例文件以及 Sample.list 配置文件模板 IA32：里面放着 32 位老机器使用的 EFI 引导文件 Utilities：OC 官方集成的小工具都放在这里 X64： 里面放着 64 位目前主流机器使用的 EFI 引导文件 知道了大概的目录结果的话，下面来详细的介绍一下这些目录里面的文件详细情况。 Docs ~/Downloads/OpenCore-0.7.3-RELEASE/Docs . ├── AcpiSamples # ACPI 示例文件 │ ├── Binaries # 编译好的 ACPI 文件 │ │ ├── SSDT-ALS0.aml │ │ ├── SSDT-AWAC-DISABLE.aml │ │ ... │ └── Source # ACPI 原始文件 │ ├── SSDT-ALS0.dsl │ ├── SSDT-AWAC-DISABLE.dsl │ ... ├── Changelog.md # 版本更新日志 ├── Configuration.pdf # 当期版本的官方配置文档 ├── Differences.pdf # 和上一个版本的改变部分 ├── Sample.plist # 当期版本的配置文件模板 └── SampleCustom.plist # 当期版本的配置文件模板 这里面文件都比较好理解，除了发现貌似 2 个配置文件模板，分别是 Sample.plist 和 SampleCustom.plist，但是国光我对比了一下，发现二者基本上没有差别，理论上都是可使用的，我们普遍使用 Sample.plist 这个配置文件比较多。 Utilities 这个目录下放着一些 OC 官方的小工具，下面来分别介绍一下这些小工具的作用 acdtinfo：检测当前机器的 kexts 安装情况 ACPIe：产生有用的 ACPI 查找跟踪排错使用 CreateVault：里面包含了 RSA 秘钥生成工具和用来创建 Valut 的脚本 disklabel：标签生成小工具，一般也用不到 icnspack：icns 合成制作小工具，想要自己自定义主题的时候可以用得上 kpdescribe：调式 Debug 排错使用，用于恢复堆栈跟踪 LegacyBoot：在旧电脑中模拟 UEFI 环境的工具和脚本 LogoutHook：用于模拟 NVRAM 保存的增强脚本 macrecovery：启动盘制作脚本 macserial：序列号生成工具 ocpasswordgen：OpenCore 密码数据生成工具 ocvalidate：检测 config.list 语法的正确与否 EFI 最后来到了我们的重头戏 EFI 部分，下面是 EFI 主要文件夹的作用讲解： ~/Downloads/OpenCore-0.7.3-RELEASE/X64/EFI . ├── BOOT # 引导文件夹 │ └── BOOTx64.efi # 引导文件 └── OC # OC 文件夹 ├── ACPI # ACPI 存放的文件夹 │ ├── SSDT-EC.aml │ ├── SSDT-PLUG.aml │ │── SSDT-PNLF.aml │ ... ├── Drivers # OC 驱动的文件夹 │ ├── AudioDxe.efi │ ├── CrScreenshotDxe.efi │ ├── HiiDatabase.efi │ ... ├── Kexts # 存放内核拓展 kexts 的文件夹 │ ├── AppleALC.kext │ ├── Lilu.kext │ ├── WhateverGreen.kext │ ... ├── OpenCore.efi # OC 的核心文件 ├── Resources # OC 的主题样式 │ ├── Audio │ ├── Font │ ├── Image │ └── Label └── Tools # OC 小工具文件夹 ├── BootKicker.efi ├── ChipTune.efi ├── CleanNvram.efi ... BOOT BOOT 引导文件夹，下面躺着 BOOTx64.ef 引导文件 OC/ACPI 下面存放这 SSDT 编译好的文件，格式均为 .aml 格式，关于 SSDT 详细的说明可以参考下面的章节 OC/Drivers 这里放着一些驱动文件，这些驱动均已 .efi 后缀结尾，OC 官方默认的驱动文件以及说明如下： AudioDxe.efi：用与启动的时候播放 Duang 的声音，就像白苹果那样 CrScreenshotDxe.efi：OC 引导界面截图驱动，按 F10 会保存当前界面的截图到 EFI 分区的根目录下 HiiDatabase.efi：用于支持 UEFI 字体渲染，四代酷睿后一般不需要 NvmExpressDxe.efi：用于让老主板支持 NVME Express 设备，四代酷睿后一般不需要 OpenCanopy.efi：使用图形化 OC 主题必备驱动 OpenHfsPlus.efi：文件系统驱动，用于支持识别 HFS+ 的磁盘格式 OpenLinuxBoot.efi：OC 0.7.3 新增的驱动，用于引导 Linux 系统 OpenPartitionDxe.efi：分区管理驱动程序。用于加载旧版 macOS 的 DMG 映像 OpenRuntime.efi：OC 核心必备驱动，功能比较强大，大家记住这个是必备的驱动就行 OpenUsbKbDxe.efi：USB 键盘驱动，用于模拟苹果热键，是 KeySupport 的等效方案 Ps2KeyboardDxe.efi：PS/2 键盘驱动，这个 PS/2 键盘也太老了吧，我好多年没见过了 Ps2MouseDxe.efi：PS/2 鼠标驱动，同样也太老了，很多年没有见过了 UsbMouseDxe.efi：USB 鼠标驱动，有些虚拟机需要依赖改驱动才可以在引导界面使用鼠标 XhciDxe.efi：XHCI USB controller 驱动程序，基本上 2 代酷睿开始大多数固件都自带这个驱动程序了 OC/Kexts 这里放着一些 Kexts 内核扩展文件，格式均为 .kext 文件，关于 Kexts 详细的说明可以参考下面的章节 Resources 这里放着 OC 的第三方主题文件，实际上国光我一直用的官方主题，就挺简约的。 Tools OC 小工具文件夹，像下面的 CleanNvram.efi 和 ResetSystem.efi 就是其中的一些小工具： OC 官方自带的工具文件以及说明如下： BootKicker.efi：调用苹果原生的引导切换 GUI, 给白苹果使用的，黑苹果不支持 ChipTune.efi：测试 BeepGen 协议并生成不同风格和长度的音频信号。 CleanNvram.efi：NVRAM 清理工具，实际上 OC 自带的 NVRAM 清理功能已经足够了 ControlMsrE2.efi：检查所有内核的CFG 锁定（MSR 0xE2写保护）一致性，并在更改此类隐藏选项 CsrUtil.efi：简单实现苹果csrutil的 SIP 相关功能 GopStop.efi：停止显卡 GOP，排错时使用用一个简单的场景测试 GraphicsOutput 协议 KeyTester.efi：在 SimpleText 模式下测试键盘输入。 MmapDump.efi：ProvideCustomSlide 选项的必要性 OpenControl.efi：为其他工具提供 NVRAM 保护，以便在从 OC 启动时能够获得完整的 NVRAM 访问权限。 OpenShell.efi：OpenCore 配置的 UEFI Shell ResetSystem.efi：用于执行系统重置的实用程序 RtcRw.efi：用于读取和写入 RTC (CMOS) 存储器的实用程序。 TpmInfo.efi：检查平台上的英特尔 PTT（平台信任技术）功能，如果启用，则允许使用 fTPM 2.0 好了，至此 OpenCore 的文件结构就介绍的差不多了，下面开始学习下 ACPI 的相关知识。 powered by Gitbook该文章最后修改时间： 2021-09-18 15:56:15 "},"3-准备工作/3-3.html":{"url":"3-准备工作/3-3.html","title":"3. 准备 ACPI","keywords":"","body":"3. 准备 ACPI 基本概念 APCI 高级配置与电源接口（Advanced Configuration and Power Interface），是 1997 年由英特尔、微软、东芝共同提出、制定的操作系统电源管理、硬件配置接口，ACPI 定义了系统固件 BIOS 或 UEFI 和操作系统之间的硬件抽象接口。 它帮助操作系统合理控制和分配计算机硬件设备的电量，有 了 ACPI ，操作系统可以根据设备实际情况，根据需要把不同的硬件设备关闭。 它主要涵盖的功能包括： System power management（系统电源管理） Device power management（设备电源管理） Processor power management（处理器电源管理） Device and processor performance management（设备及处理器性能管理） Configuration / Plug and Play（配置/即插即用） System Events（系统事件） Battery management（电池管理） Thermal management（温度管理） Embedded Controller（嵌入式控制器） SMBus Controller（SMBus控制器） 在计算机应用平台，ACPI 越来越重要。ACPI 由很多表组成，包括：RSDP，SDTH，RSDT，FADT，FACS，DSDT，SSDT，MADT，SBST，XSDT，ECDT，SLIT，SRAT。其中 DSDT 就是它的一个重要的描述表。 DSDT 、SSDT 正如上面所说，DSDT 和 SSDT 是 ACPI 规范的一部分，概述了硬件设备，如 USB 控制器、CPU 线程、嵌入式控制器、系统时钟等。 DSDT（差分系统描述表）可以被视为包含大部分信息的主体 SSDT（辅助系统描述表）传递的信息较少 可以将 DSDT 视为建筑蓝图，其中 SSDT 是概述项目额外细节的便签 Why？为什么要知道这些 macOS 可能对 DSDT 中存在的设备非常挑剔，因此我们需要纠正它。macOS 正常工作需要修正的主要设备： EC 嵌入式控制器 非苹果的机型都在其 DSDT 中公开了一个 EC，但是通常与 macOS 不兼容，可能会导致恐慌，因此需要对 macOS 隐藏。 对于笔记本电脑，实际的嵌入式控制器仍然需要启用电池和热键才能工作，并且重命名 EC 还会导致 Windows 出现问题，因此最好在不禁用真正的嵌入式控制器的情况下创建假 EC。 Plugin type 插件类型 允许使用 XCPM 在 Intel Haswell 以及更新架构的 CPU上提供本地 CPU 电源管理，这个不适合 AMD AWAC system clock AWAC 系统时钟 因为 macOS 无法与 AWAC 时钟通信，因此这要求我们要么强制使用传统 RTC 时钟，要么在不可用的情况下为 macOS 创建一个假的时钟来玩 NVRAM SSDT 真正的 300 系列主板（非 Z370）不会在 ACPI 中将 FW 芯片声明为 MMIO，因此内核会忽略 UEFI 内存映射声明的 MMIO 区域。这个 SSDT 带回了 NVRAM 支持 Backlight SSDT 用于修复笔记本电脑上的背光控制支持 GPIO SSDT 用于允许 VoodooI2C 连接，仅适用于笔记本电脑 XOSI SSDT 用于将 OSI 调用重新路由到此 SSDT，主要用于诱使我们的硬件认为其启动 Windows，以便我们获得更好的触控板支持 IRQ SSDT and ACPI patches 用于修复 DSDT 中的 IRQ 冲突，主要用于笔记本电脑。SSDT Time 独占 注意 Skylake 和较新的 CPU 很少有 IRQ 冲突，这主要在 Broadwell 和较旧的系统上使用 常见 ACPI 组合 ACPI 可以自己手动编译，也可以下载别人编译好的，虽然自己编译是最完美的，但是需要一定的学习门槛，所以小白用户还是建议下载编译好的 SSDT 文件即可。 下面可以根据自己的机型，参考下文，下载属于自己的 ACPI 文件即可。 Intel 桌面 Penryn、Younah、Conroe SSDT-EC-DESKTOP.aml Lynnfield、Clarkdale SSDT-EC-DESKTOP.aml SandyBridge、Ivy Bridge CPU-PM.aml 电源管理使用 需要自己脚本生成，比较老了，可以参考 Sandy and Ivy Bridge Power Management 生成后需要配合 ACPI 补丁：Delete CpuPm、Delete Cpu0Ist SSDT-EC-DESKTOP.aml SSDT-IMEI.aml 修复 Ivy Bridge CPU 与 6 系列主板混合的问题 修复 Sandy Bridge CPU 与 7 系列主板混合的问题 Hasewell、Broadwell SSDT-PLUG-DRTNIA.aml SSDT-EC-DESKTOP.aml Skylake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-DESKTOP.aml Kaby Lake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-DESKTOP.aml Coffee Lake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-DESKTOP.aml SSDT-AWAC.aml 修复较新硬件上的系统时钟 支持以下主板： B360、B365、H310、H370 Z370（具有较新 BIOS 版本的 Gigabyte 和 AsRock 主板） Z390 B460、Z490 400系列 （Comet Lake） 495系列 （Ice lake） Comet Lake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-DESKTOP.aml SSDT-AWAC.aml 修复较新硬件上的系统时钟 支持以下主板： B360、B365、H310、H370 Z370（具有较新 BIOS 版本的 Gigabyte 和 AsRock 主板） Z390 B460、Z490 400系列 （Comet Lake） 495系列 （Ice lake） SSDT-RHUB.aml 修复某些 OEM主板的问题，需要关闭 RHUB 设备并强制 macOS 手动重建端口 华硕 Z490 需要这个 SSDT 微星主板有待测试 技嘉和华擎主板工作很好，不需要这个 SSDT Intel 笔记本 Clarksfield、Arrandale SSDT-EC-LAPTOP.aml SSDT-XOSI.aml 触控板连接修复 需要配合 ACPI 补丁：Change _OSI to XOSI 来使用 NUC 不需要这个 SSDT-PNLF.aml 修复笔记本亮度控制，NUC 不需要这个 Sany Bridge、Ivy Bridge CPU-PM.aml 电源管理使用 需要自己脚本生成，比较老了，可以参考 Sandy and Ivy Bridge Power Management 生成后需要配合 ACPI 补丁：Delete CpuPm、Delete Cpu0Ist SSDT-EC-LAPTOP.aml SSDT-XOSI.aml 触控板连接修复 需要配合 ACPI 补丁：Change _OSI to XOSI 来使用 NUC 不需要这个 SSDT-PNLF.aml 修复笔记本亮度控制，NUC 不需要这个 SSDT-IMEI.aml 修复 Ivy Bridge CPU 与 6 系列主板混合的问题 修复 Sandy Bridge CPU 与 7 系列主板混合的问题 Haswell、Broadwell SSDT-PLUG-DRTNIA.aml SSDT-EC-LAPTOP.aml SSDT-XOSI.aml 触控板连接修复 需要配合 ACPI 补丁：Change _OSI to XOSI 来使用 NUC 不需要这个 如果这个不成功的话，可手动使用 MaciASL 编译 SSDT-GPI0.dsl.zip 来替代 XOSI SSDT-PNLF.aml 修复笔记本亮度控制，NUC 不需要这个 Skylake、Kaby Lake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-LAPTOP.aml SSDT-XOSI.aml 触控板连接修复 需要配合 ACPI 补丁：Change _OSI to XOSI 来使用 NUC 不需要这个 如果这个不成功的话，可手动使用 MaciASL 编译 SSDT-GPI0.dsl.zip 来替代 XOSI SSDT-PNLF.aml 修复笔记本亮度控制，NUC 不需要这个 Coffee Lake、Whiskey Lake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-LAPTOP.aml SSDT-XOSI.aml 触控板连接修复 需要配合 ACPI 补丁：Change _OSI to XOSI 来使用 NUC 不需要这个 如果这个不成功的话，可手动使用 MaciASL 编译 SSDT-GPI0.dsl.zip 来替代 XOSI SSDT-PNLF-CFL.aml SSDT-AWAC.aml 修复较新硬件上的系统时钟 支持以下主板： B360、B365、H310、H370 Z370（具有较新 BIOS 版本的 Gigabyte 和 AsRock 主板） Z390 B460、Z490 400系列 （Comet Lake） 495系列 （Ice lake） Coffee Lake Plus、Comet Lake SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-LAPTOP.aml SSDT-XOSI.aml 触控板连接修复 需要配合 ACPI 补丁：Change _OSI to XOSI 来使用 NUC 不需要这个 如果这个不成功的话，可手动使用 MaciASL 编译 SSDT-GPI0.dsl.zip 来替代 XOSI SSDT-PNLF-CFL.aml SSDT-AWAC.aml 修复较新硬件上的系统时钟 支持以下主板： B360、B365、H310、H370 Z370（具有较新 BIOS 版本的 Gigabyte 和 AsRock 主板） Z390 B460、Z490 400系列 （Comet Lake） 495系列 （Ice lake） SSDT-PMC.aml 用来支持适配 NVRAM 300 系列主板都需要此 SSDT（Z370除外） 支持以下主板： B360、B365 H310、H370（HM370 应该不需要这个） Z390 Intel 高端桌面 Nehalem、Westmere SSDT-EC-DESKTOP.aml Sandy Bridge-E、Ivy Bridge-E SSDT-EC-DESKTOP.aml SSDT-UNC.aml 禁用 ACPI 中未使用的设备，确保 IOPCIFamily 不会出现内核恐慌 所有的 X99 主板和大多数 X79 主板需要这个 SSDT 此外还有一些 C602、C612 主板也需要这个 SSDT Haswell-E、Broadwell-E SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-DESKTOP.aml SSDT-RTC0-RANGE-HEDT.aml Big Sur 需要确保 RTC 设备的兼容 SSDT-UNC.aml 禁用 ACPI 中未使用的设备，确保 IOPCIFamily 不会出现内核恐慌 所有的 X99 主板和大多数 X79 主板需要这个 SSDT 此外还有一些 C602、C612 主板也需要这个 SSDT Skylake-X/W、Cascade Lake-X/W SSDT-PLUG-DRTNIA.aml SSDT-EC-USBX-DESKTOP.aml SSDT-RTC0-RANGE-HEDT.aml Big Sur 需要确保 RTC 设备的兼容 AMD 桌面 Bulldozer(15h)、Jaguar(16h) SSDT-EC-USBX-DESKTOP.aml Ryzen、Threadripper(17h and 19h) SSDT-EC-USBX-DESKTOP.aml SSDT-CPUR.aml 用于 B550 和 A520 主板修复 CPU 定义，其他主板可以不使用 X570 和较旧的主板不需要此 SSDT 黑苹果 ACPI 大全? 由于 ACPI 太多了，国光我不可能都列的很全，而且有些 SSDT 作用网上没有权威解释，所以下面的解释说明也会有误差，仅做参考使用，如果内容方面有所遗漏或者发现严重错误的话，欢迎 Github 提交 PR 补充： 序号 SSDT 文件名 解释说明 1 FixShutdown-USB-SSDT.aml 修复 USB 控制器，解决睡眠或者关机自动重启 2 Spoof-SSDT.aml 禁用 GPU 3 SSDT-ALS0.aml 添加虚拟的环境光传感器以在重启后保存之前亮度设置 4 SSDT-ARTC.aml 修复在较新的硬件上找到的系统时钟。OCC 自带的 5 SSDT-AWAC.aml 300 系列主板使用， 6 SSDT-BAT.aml ThinkPad 等型号的电池补丁 7 SSDT-BKey.aml 早期的亮度调节使用 8 SSDT-BRG0.aml BIOS 没有 Serial(COM) Port 串口或者找不到禁用 Super IO 的话可能需要 9 SSDT-CPUR.aml 能源管理，针对 AMD B550 和 A520 主板，X570 等较旧的主板不要使用 10 SSDT-EC-DESKTOP.aml 老的桌面平台使用，用于修复嵌入式控制器 11 SSDT-EC-LAPTOP.aml 老的笔记本平台使用，用于修复嵌入式控制器 12 SSDT-EC-USBX-DESKTOP.aml 新的桌面平台使用，用于修复嵌入式控制器 13 SSDT-EC-USBX-LAPTOP.aml 新的笔记本平台使用，用于修复嵌入式控制器 14 SSDT-EHCx_OFF.aml USB 兼容性表，禁用EHC1和EHC2。OCC 自带的 15 SSDT-EHCx-DISABLE.aml 不清楚具体作用 在其他人的 EFI 里面看到过 16 SSDT-GPI0.aml 触控板连接修复。OCC 也自带的 17 SSDT-GPRW.aml 修复睡眠自动唤醒补丁 18 SSDT-HPET.aml 主要用于 X79、X99 和笔记本电脑用户的 IRQ 补丁 19 SSDT-HV-CPU.aml 对 macOS 的 Hyper-V 集成支持 20 SSDT-HV-PLUG.aml 对 macOS 的 Hyper-V 集成支持 21 SSDT-HV-VMBUS.aml 对 macOS 的 Hyper-V 集成支持 22 SSDT-IMEI-S.aml 当 DSDT 中没有 IMEI 设备需要通过设备属性设置定义设备 ID 的时候才需要 23 SSDT-IMEI.aml 当 DSDT 中没有 IMEI 设备需要通过设备属性设置定义设备 ID 的时候才需要 24 SSDT-IRQ.aml 修复 IRQ 冲突 25 SSDT-LANC.aml 修复睡眠自动唤醒补丁 26 SSDT-LIDpatch.aml 合盖睡眠 27 SSDT-NDGP.aml 屏蔽独显 28 SSDT-OLARILA.aml 作用不详 来自于 Olaria.com 的特殊 SSDT 29 SSDT-OPT.aml 不清楚具体作用 在其他人的 EFI 里面看到过 30 SSDT-PLUG_FX.aml 可能是 AMD FX 系列专用的 CPU 能源管理 31 SSDT-PLUG_RYZEN.aml 可能是 AMD Ryzen 系列专用的 CPU 能源管理 32 SSDT-PLUG-DRTNIA.aml 用于 Hasewell 和更新 CPU 的能源管理 33 SSDT-PMC.aml 300 系列主板原生的 NVRAM 补丁 34 SSDT-PNLF-CFL.aml Coffee Lake 和更新平台的笔记本背光修复补丁 35 SSDT-PNLF.aml 大多数主板的背光修复补丁 36 SSDT-PTSWAK.aml 修复关机、睡眠问题 37 SSDT-RHUB.aml 修复某些 400 系列主板的问题，需要关闭 RHUB 设备并强制 macOS 手动重建端口 38 SSDT-RTC0-RANGE-HEDT.aml 高端桌面平台专用，因为Big Sur 需要确保 RTC 设备的兼容 39 SSDT-SBUS-MCHC.aml 修复 SMBus 支持，解决 温度、风扇、电压等读数问题 40 SSDT-SHC0.aml 不清楚具体作用 在其他人的 EFI 里面看到过 41 SSDT-ThinkPad_ClickPad ThinkPad 的 ClickPad 专用 42 SSDT-UNC.aml 禁用 ACPI 中未使用的设备，确保 IOPCIFamily 不会出现内核恐慌 43 SSDT-UPRW.aml 修复睡眠自动唤醒补丁 44 SSDT-USB-Reset.aml 可能和 SSDT-RHUB 作用相同 45 SSDT-USBX.aml 不清楚具体作用 在其他人的 EFI 里面看到过 46 SSDT-XHC2.aml 自动注入 XHC 属性？ 47 SSDT-XOSI.aml 触控板连接修复，模拟 Windows 版本的 Darwin，需要配合补丁 powered by Gitbook该文章最后修改时间： 2021-09-18 15:55:43 "},"3-准备工作/3-4.html":{"url":"3-准备工作/3-4.html","title":"4. 准备 Kexts","keywords":"","body":"4. 准备 Kexts 基本概念 Kext 的英文全称叫做 Kernel Extension，即内核扩展，我们可以通俗的理解为这个就是 macOS 的驱动，使用方法只需要将这些 kext 文件放入到 EFI/OC/kexts 文件夹下面，然后编辑 OC 配置文件加载这些 kexts 并调节好顺序即可。 下载 Kexts 下面国光来简单列举一些下载 Kexts 的方法： 使用 OpenCore Configurator 这类第三方 OC 编辑器软件下载 搜索引擎搜索 Kexts 的Github 下面地址，手动去 Releases 里面寻找编译好的 kext 文件 使用 OC 官方的下载页面来下载常见的 kexts：https://dortania.github.io/builds/ Kexts 的分类 必备驱动 必备的 kexts 如果缺失的话，你的黑苹果系统就无法启动了 VirtualSMC.kext 模拟白苹果的 SMC 芯片 替代古老的 FakeSMC 只支持 OS X 10.6+ 版本的系统 Lilu.kext 很多著名 kexts 的依赖，没有 Liu 就无法正常使用 AppleALC、WhateverGreen、VirtualSMC 等 只支持 OS X 10.8+ 版本的系统 VirualSMC 插件 大家下载好 VirtualSMC 编译好的 kexts 的话，会发现里面还躺着其他的 kexts，这些其他的 kexts 就是 VirtualSMC 的插件了，下面来列举说明一下这些插件的作用： SMCBatteryManager.kext 笔记本专用，用于正确读取显示电池容量 SMCDellSensors.kext 某些 Dell 机器专用，一般不是 Dell 的机器不需要使用 对支持 SMM（系统管理模式）的 Dell 机器的风扇进行更准确的监视和控制 SMCLightSensor.kext 笔记本专用，用于笔记本电脑上的环境光感应器 大多都的笔记本都没有这个感应器，所以就算用了也只是伪感光 SMCProcessor.kext 用于监控 CPU 温度，台式机和笔记本都适用 不支持 AMD 的 CPU SMCSuperIO.kext 用于监控风扇的转速，台式机和笔记本都适用 不支持 AMD 的 CPU 显卡驱动 WhateverGreen.kext 基本上所有的核显和独显都要使用这个 kext 用于图形修补、DRM 修复、缓冲区修复等 只支持 OS X 10.8+ 版本的系统 声卡驱动 AppleALC.kext 用于 AppleHDA 修补，支持大多数的板载声卡驱动 文件夹下的 AppleALCU.kext 是 AppleALC 的精简版，仅支持数字音频 AMD 的主板和 CPU 可能会遇到一些问题，很少可以驱动麦克风 只支持 OS X 10.8+ 版本的系统 VoodooHDA.kext 比较古老且经典的声卡驱动，也叫万能声卡驱动 如果 AppeALC.kext 无法驱动话可以考虑这个 但是使用体验完美度肯定不如原生的 AppleALC.kext 的 只支持 OS X 10.6+ 版本的系统 USB 驱动 USBInjectAll.kext RehabMan 康复者之前的 USB 驱动 18 年 11 月发布的 0.7.1 是最后应该版本，后面再没有更新过 用于在 ACPI 中没有定义 USB 端口的系统上注入 Intel USB 控制器 Skylake+ 的桌面CPU 不需要这个 AsRock 华擎主板的话可能还是需要这个 Coffee Lake 貌似也还是需要这个 Skykak 之前的 CPU 理论上也是需要 支持 OS X 10.11+ 版本的系统 写到这里的时候感慨万千，RehabMan 可以说是黑苹果届的元老了，他也是 Tonymacx86 的一位版主，很多著名的黑苹果 kexts 都出自于他的手里，但是因为种种原因 18 年之后就再也没有活跃了，销声匿迹仿佛这个人没有来过一样，但是江湖上依然还有他的传说：Can we all thank RehabMan 我真的是太佩服这种人了，十年如一日的在论坛里面解答问题，定期更新这开源的 kexts，甚至有些 Apple 苹果开发者都来像他学习。黑苹果比较讽刺的是，伸手党没有感恩之心的人太多了，也许他安装系统遇到困难的时候就去你的 Github 下面提交 issue 催着你更新，就好像你开源这个驱动就要为他负责到底一样；安装成功之后呢，提问的人也就消失了，甚至连句谢谢都没有说，更不会留下任何有价值的文档信息之类的。这样就会导致很多大佬们每天千篇一律的回答各种重复的毫无技术含量的问题，如果是国光我的话，我肯定坚持不了几天的，但是 RehabMan 坚持了 10 余年，这真的是太令人震撼了。RehabMan 在 TonymacX86 的最后一个帖子说道：“我还在，但忙于其他（现实生活）的事情。将无法回答这里的问题。人是需要学习阅读的。” 但愿，希望真的如此，而不是被这些没有感恩之心的人伤透了心。 USBInjectAll.kext 国内黑苹果小兵大佬维护的版本 在 RehabMan 基础性更新完善的版本，目前到了 0.7.7 版本 支持后面新的 400、500 系列主板的支持 说到黑苹果小兵，国光我也很佩服这样的人，初次接触认识他的时候，我还以为是一个 30 多岁的中年人，结果后面才知道他的儿子已经上大学了，而且他也快到了退休的年龄。 黑果小兵也像 RehabMan 一样，写了很多黑苹果教程文章，也开源了很多机型的驱动，而且常年来一直坚持提供黑苹果懒人镜像的下载包，最关键的是都快退休的年龄了，还坚持做黑苹果这个比较“时髦”的技术，真的厉害了，不知道国光我老的时候，还可以坚持做这些吗？哈哈~ 如果黑苹果技术还存在的话。 有线网卡驱动 AtherosE2200Ethernet.kext Atheros 高通和 Killer 杀手 网卡 需要 注意：Atheros Killer E2500 型号实际上是基于 Realtek 的，所以请使用 RealtekRTL8111 驱动 支持 OS X 10.8+ 版本的系统 IntelMausi.kext 大多数 Intel 因特尔的网卡驱动 基于 I211 的芯片组的网卡需要使用 SmallTreeIntel82576 kext 官方支持 Intel 的 82578、82579、I217、I218 和 I219 网卡 详细支持驱动的有线网卡型号可以参考：https://github.com/acidanthera/IntelMausi 需要 OS X 10.9 或更新版本，10.6-10.8 的老用户可以使用 IntelSnowMausi 替代 LucyRTL8125Ethernet.kext Realtek 的 2.5Gb 的网卡驱动 官方这个页面需要注册才可以下载，也可以下载国光我上传蓝奏云的版本 需要 macOS 10.15+ 版本的系统 RealtekRTL8111.kext 大多数 Realtek 的千兆网卡驱动 注意：有时最新版本的 kext 可能无法正常工作，这个时候可以尝试使用旧版本。 SmallTreeIntel82576.kext I211 有线网卡驱动 大多数配备 intel 有线网卡的 AMD 主板需要 版本支持情况 OS X 10.9-12(v1.0.6)、macOS 10.13-14(v1.2.5)、macOS 10.15+(v1.3.0) 其他不需要 kext 的有线网卡 Intel I225-V 某些高端的 Comet Lake 主板会配备这个 I225-V 2.5GBe 有线网卡 OC 配置文件的设备属性里面添加 PciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0,0x0) 内容如下： device-id F2150000 类型为 DATA 类型 如果上面添加后遇到 AppleIntelI210Ethernet kext 内核报错的话，那么可以换成以下路径： PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0) 需要 macOS 10.15 或更高版本 Intel I350 OC 配置文件的设备属性里面添加 PciRoot(0x0)/Pci(0x1,0x1)/Pci(0x0,0x0) 内容如下： device-id 33150000 类型为 DATA 类型 需要 OS X 10.10 或更新版本 一些比较古老的百兆有线网卡驱动 AppleIntelE1000e.kext 主要与基于 10/100MBe 的 Intel 有线网卡相关 需要 10.6 或更高版本 RealtekRTL8100.kext 支持的网卡型号有 RTL8101E、RTL8102E、RTL8103E、RTL8401E、RTL8105E、RTL8402、RTL8106E、RTL8106EUS、RTL8107E 官方这个页面需要注册才可以下载，也可以下载国光我上传蓝奏云的版本 BCM5722D.kext Broadcom 的有线网卡驱动 支持的网卡型号有 BCM5722、BCM5754、BCM5754M、BCM5755、BCM5755M、BCM57788、BCM5787、BCM5787M、BCM5906、BCM5906M 需要 OS X 10.6 或更新版本 无线网卡驱动 intel 无线网卡系列 国内 zxystd 大佬从 Linux OpenBSD 移植的驱动，非常硬核，完成度很高，接力也都可以正常使用，隔空投送目前只能识别，暂时还无法传输文件，不过已经很厉害了。 AirportItlwm.kext Intel 网卡的 WiFi 驱动 支持驱动的 intel 无线网卡型号表：https://docs.oiw.workers.dev/itlwm/Compat.html 只支持 macOS 10.13 以及更高的版本 IntelBluetoothFirmware.kext 与 IntelBluetoothFirmware.kext Intel 网卡的蓝牙驱动，与 AirportItlwm.kext 搭配使用 只支持 macOS 10.13 以及更高的版本 如果确定你的网卡型号支持驱动，但是蓝牙无法使用，那么多半是你的 USB 没有定制好 Broadcom 博通免驱系列 免驱网卡型号众多，可以参考 OC 官方的无线网卡购买指南 AirportBrcmFixup.kext 非苹果原装无线网卡或者非 Fenvi 奋威的博通网卡的无线网卡驱动 支持 OS X 10.10 以及更高的版本 Big Sur 后面的系统可能有些问题，可以参考官方的解决方案 BrcmPatchRAM 系列 所有非 Apple/非 Fenvi 无线网卡的蓝牙驱动 BrcmPatchRAM.kext 10.8-10.10 系统使用 BrcmPatchRAM2.kext 10.11-10.14 系统使用 BrcmPatchRAM3.kext 10.15+的系统使用 博通网卡的几个细节，Big Sur 以及后面的系统由于驱动有点异常，需要手动删除 AirPortBrcm4360_Injector.kext 蓝牙加载需要一定顺序，下面是 10.15+ 系统的蓝牙加载顺序 `Kernel -> Add `： BrcmBluetoothInjector.kext BrcmFirmwareData.kext BrcmPatchRAM3.kext 其他驱动 CpuTscSync.kext 在某些 Intel 的 HEDT 和服务器主板上同步 TSC 需要,如果没有这个 macOS 可能会非常慢甚至无法启动。 不适用于 AMD CPU 需要 OS X 10.8 或更新版本 为具有MSR_IA32_TSC_ADJUST(03Bh) 的CPU 添加了 macOS 12 兼容性 NVMeFix.kext 用于修复非 Apple 苹果的 NVMe 上的电源管理和初始化 需要 macOS 10.14 或更高版本 HibernationFixup.kext 一个旨在修复休眠兼容性问题的 Lilu 插件 解决黑苹果系统睡眠后无法唤醒、死机、黑屏的问题 SATA-unsupported.kext 笔记本电脑 在 macOS 中无法看到 SATA 硬盘驱动器的话，可以考虑使用 CtlnaAHCIPort.kext 一般在 Big Sur 下笔记本电脑 在 macOS 中无法看到 SATA 硬盘驱动器的话，可以考虑使用 AMD 常用驱动 AMDRyzenCPUPowerManagement.kext AMD 处理器的电源管理驱动 SMCAMDProcessor.kext AMD 处理器的传感器监控和 VirtualSMC 插件 AppleMCEReporterDisabler.kext 用于关闭 AppleMCERReport AppleMCERReport会导致AMD CPU的内核崩溃 某些双 CPU 的主板可能也有帮助 受影响的 SMBIOS 为：MacPro6,1、MacPro7,1、iMacPro1,1 需要 macOS 10.15 或更高版本 XLNCUSBFix.kext AMD FX 系统的 USB 修复，不推荐用于 Ryzen 需要 macOS 10.13 或更高版本 VoodooHDA.kext FX 系统的音频和 Ryzen 系统的前面板麦克风和外放的支持 请勿与 AppleALC 混合使用 比较古老且经典的声卡驱动，也叫万能声卡驱动 如果 AppeALC.kext 无法驱动话可以考虑这个 但是使用体验完美度肯定不如原生的 AppleALC.kext 的 只支持 OS X 10.6+ 版本的系统 笔记本专用驱动 输入设备驱动 VoodooPS2Controller.kext 适用于配备 PS2 键盘、鼠标和触控板的系统 MT2 (Magic Trackpad 2) 功能需要 macOS 10.11 或更新版本 RehabMan 的 VoodooPS2Controller.kext 对于带有 PS2 键盘、鼠标和触控板的旧系统，或者当您不想使用 VoodooInput 时 支持 macOS 10.6+ 支持 VoodooRMI.kext 和 VoodooSMBus.kext 对于带有 Synaptics SMBus 设备的触控板驱动 主要用于触控板和轨迹点，ThinkPad 小红点也可以驱动 MT2 (Magic Trackpad 2) 功能需要 macOS 10.11 或更新版本 VoodooSMBus.kext 对于带有基于 ELAN SMBus 的设备触控板驱动 主要用于触控板和轨迹点 目前支持 macOS 10.14 或更新版本 VoodooI2C.kext 用于修复 I2C 设备的触控板驱动 一般是一些更高级的触摸板和或者是触摸屏 MT2 (Magic Trackpad 2) 功能需要 macOS 10.11 或更新版本 VoodooI2C 的一些插件 VoodooI2CHID.kext：微软 HID 驱动，也支持某些型号的触控屏 VoodooI2CELAN.kext：ELAN 专用，ELAN1200+ 的版本需要 VoodooI2CHID.kext 代替 VoodooI2CSynaptics.kext：Synaptics 专用，Synaptics F12 协议需VoodooI2CHID代替 VoodooI2CFTE.kext：FTE1001 触控板 VoodooI2CAtmelMXT.kext：Atmel 多点触控协议 其他驱动 ECEnabler.kext 修复了在大多数笔记本上读取电池状态的问题（允许读取超过 8 位长的 EC 字段） BrightnessKeys.kext 笔记本亮度快捷键驱动 AsusSMC.kext 华硕笔记本电脑专用的 VirtualSMC 插件 提供 ALS、键盘背光和 Fn 键驱动，支持电池监控充电 支持配备了 ATK 设备的华硕笔记本电脑 CPUFriend.kext 和 CPUFriendDataProvider.kext 可以实现对 macOS CPU 频率睿频性能的调整 需要配合脚本生成时候自己机型的 kexts，可参考官方教程 黑苹果 Kexts 大全? 由于 Kexts 太多太杂了，这个工作量太大了，我直接贴一些轮子的地址，大家自己去看看就行： OpenCore 常用 Kexts 一些比较老的 Kexts 一些基于Liu 的 Kexts 如果你是一个有耐心的人的话，如果整理好 Kexts 完整列表的话，欢迎提交 PR powered by Gitbook该文章最后修改时间： 2021-09-18 16:05:19 "},"3-准备工作/3-5.html":{"url":"3-准备工作/3-5.html","title":"5. Drivers说明","keywords":"","body":"5. Drivers说明 完整的 Drivers 说明 OC/Drivers 里放着一些驱动文件，这些驱动均已 .efi 后缀结尾，OC 官方默认的驱动文件以及说明如下： AudioDxe.efi：用与启动的时候播放 Duang 的声音，就像白苹果那样 CrScreenshotDxe.efi：OC 引导界面截图驱动，按 F10 会保存当前界面的截图到 EFI 分区的根目录下 HiiDatabase.efi：用于支持 UEFI 字体渲染，四代酷睿后一般不需要 NvmExpressDxe.efi：用于让老主板支持 NVME Express 设备，四代酷睿后一般不需要 OpenCanopy.efi：使用图形化 OC 主题必备驱动 OpenHfsPlus.efi：文件系统驱动，用于支持识别 HFS+ 的磁盘格式 OpenLinuxBoot.efi：OC 0.7.3 新增的驱动，用于引导 Linux 系统 OpenPartitionDxe.efi：分区管理驱动程序。用于加载旧版 macOS 的 DMG 映像 OpenRuntime.efi：OC 核心必备驱动，功能比较强大，大家记住这个是必备的驱动就行 OpenUsbKbDxe.efi：USB 键盘驱动，用于模拟苹果热键，是 KeySupport 的等效方案 Ps2KeyboardDxe.efi：PS/2 键盘驱动，这个 PS/2 键盘也太老了吧，我好多年没见过了 Ps2MouseDxe.efi：PS/2 鼠标驱动，同样也太老了，很多年没有见过了 UsbMouseDxe.efi：USB 鼠标驱动，有些虚拟机需要依赖改驱动才可以在引导界面使用鼠标 XhciDxe.efi：XHCI USB controller 驱动程序，基本上 2 代酷睿开始大多数固件都自带这个驱动程序了 常用 Drivers 正常情况下，以下 2 个是必备的驱动： OpenRuntime.efi：OC 核心必备驱动，功能比较强大，大家记住这个是必备的驱动就行 OpenHfsPlus.efi：文件系统驱动，用于支持识别 HFS+ 的磁盘格式 因为国光有使用图形化界面引导和在引导界面截图的习惯，所以我还使用了如下两个驱动： OpenCanopy.efi：使用图形化 OC 主题必备驱动 CrScreenshotDxe.efi：OC 引导界面截图驱动，按 F10 会保存当前界面的截图到 EFI 分区的根目录下 使用主题前后对比 使用主题前 使用主题后 一些 OC 主题下载的渠道： https://dortania.github.io/OpenCanopy-Gallery/blackosx.html OC主题-黑苹果动力 https://github.com/LuckyCrack/OpenCore-Themes https://github.com/chris1111/My-Simple-OC-Themes powered by Gitbook该文章最后修改时间： 2021-09-18 16:23:45 "},"3-准备工作/3-6.html":{"url":"3-准备工作/3-6.html","title":"6. OC 编辑器","keywords":"","body":"6. OC 编辑器 因为 OpenCore 的核显配置 文件是 .list 结尾的，所以需要专门的编辑器来编辑，常见的 OC 编辑器的优缺点如下： 编辑器名称 优点 缺点 ProperTree 强大、专业、跨平台 上手难度高 OpenCore Configurator 强大、简单 只有 Mac 版本 QtOpenCoreConfig 跨平台、简单 使用体验有待提升 国光我的建议如下： 如果你有 Mac 系统可以使用，首选 OpenCore Configurator Windows 小白用户建议使用 QtOpenCoreConfig 下面来分别大概介绍一下这些编辑器的安装和使用方法。 提醒一下，不同版本的 OC 配置需要使用对应版本的 OC 编辑器，否则可能产生玄学问题 ProperTree 官方项目地址为：https://github.com/corpnewt/ProperTree macOS 平台下使用 因为 macOS 自带 Python 环境的原因，双击 ProperTree.command 即可打开程序： 通过 macOS 的菜单可以完成一些主要操作。 Windows 平台下使用 Windows 10 默认不带 Python 环境，所以首先得安装一下 Python 环境才可以。首先下载 Python3，这里推荐稳定一点的 Python 3.8 的版本，官方下载地址为：https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe 安装的时候记得勾选：Add Python 3.8 to PATH： 这样会自动配置好环境变量，后面就不需要我们手动配置了，使用默认路径或者自定义路径都是OK的，国光比较偷懒使用了默认的「Install Now」，如果要使用自定义路径的话，那么这个路径最好不要出现中文，否则可能会引发一些玄学的问题。 验证是否安装成功的话，打开命令行，输入： python -V 可以看到 Python 的版本信息表示成功： 确实安装成功后，双击 ProperTree.bat 文件即可打开程序： 同样通过菜单中的 File 可以完成一些基础操作。 OpenCore Configurator OpenCore Configurator 最新版本的下载地址为： https://mackie100projects.altervista.org/download-opencore-configurator/ 找到 想要编辑的配置文件，「右键」-「打开方式」选择「OpenCore Configurator」即可： 打开后的主要界面如下： QtOpenCoreConfig QtOpenCoreConfig 建议在 Windows 使用，用来替代 ProperTree，因为 macOS 下有更棒的使用体验更好的 OpenCore Configurator 可以使用。 官方项目地址为：https://github.com/ic005k/QtOpenCoreConfig 中文说明为：https://github.com/ic005k/QtOpenCoreConfig/blob/master/READMe-en.md 下载对应的 Windows 版本的，然后打开 OCAuxiliaryTools.exe 即可，主要界面如下： 至此 OC 编辑器介绍完了，详细的使用方法大家可以参考本教程对应的 B 站讲解视频，接下来该准备配置 EFI 文件了。 powered by Gitbook该文章最后修改时间： 2021-09-18 18:17:25 "},"3-准备工作/3-7.html":{"url":"3-准备工作/3-7.html","title":"7. 初步配置","keywords":"","body":"7. 初步配置 调整文件夹结构 本部分的截图均来自于我的华擎 Z490 的开源项目 感兴趣的朋友可以自行去下载学习。 拷贝并重命名 Sample.plist 首先将 Doc 目录下的 Sample.plist 拷贝到 EFI/OC/ 目录下，并将其重命名为 config.list： 精简 Drivers Drivers 里面只留了几个必要的，详细部分可以参考前面的 Drivers 说明章节 精简 Tools 国光没有使用 Tools 的习惯，所以这里面的工具全部删掉了，Tools 里面文件的详细作用可以参考 前面的 OC 文件结构 章节： 放置属于你的 SSDT 根据前面 准备 ACPI 的部分，把你准备好的 SSDT 放入进来： 放置属于你的 Kexts 根据前面 准备 Kexts 的部分，把你准备好的 Kexts 放入进来： 替换主题文件 OC 官方默认是没有主题的，可以下载官方的简约经典主题，替换默认的 Resources 文件夹即可： config.list 加载文件 OC 和 Clover 不一样的地方在于，Clover 只需要把文件放入到该放的地方就行，但是 OC 不仅要放，还得手动加载才可以。 上一章推荐的 3 款编辑器都可以自动加载，下面来分部一一介绍一下他们加载的方法。 ProperTree ProperTree 运行后，通过按Cmd/Ctrl + O并选择config.plist上的文件来打开 config.plist，打开配置后，按Cmd/Ctrl + Shift + R 或者使用图形化菜单选择 「Clean Snapshot」： 接着选择要自带添加清理的 OC 文件夹： 完成后，您将在 config.plist 中看到就可以看到我们之前配置的 SSDT、Kexts 和 Drivers 信息了： 最后选择保存即可。 OpenCore Configurator QtOpenCoreConfig powered by Gitbook该文章最后修改时间： 2021-09-18 19:12:13 "}}